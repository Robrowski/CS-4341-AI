/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Dabrowski' at '1/15/15 7:26 PM' with Gradle 2.2.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */
import org.apache.tools.ant.taskdefs.condition.Os


// Apply the java plugin to add support for Java
 
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

sourceCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.7'
	
	compile fileTree(dir: rootDir.toString()+'/libs', includes: ['*.jar']) //db4o jar that isn't on Maven, and any other new dependencies placed in the libs directory
	compile fileTree(dir: rootDir.toString()+'/build/libs', includes: ['*.jar'])
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:4+"
}

eclipse{
	project{
		//Mark as Gradle project for Gradle plugin in case it is installed
		natures 'org.springsource.ide.eclipse.gradle.core.nature'
		
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			buildCommand 'org.eclipse.ui.externaltools.ExternalToolBuilder', LaunchConfigHandle: '<project>/.externalToolBuilders/Gradle-Windows.launch'
		} else {
			buildCommand 'org.eclipse.ui.externaltools.ExternalToolBuilder', LaunchConfigHandle: '<project>/.externalToolBuilders/Gradle-Unix.launch'
		}
	}
	
	classpath{
		downloadSources = true
		downloadJavadoc = true //This is false otherwise, we love to read JavaDoc to help use understand libraries :)
	}
}

/** Helper function some day */
//def compile_jar(class_name ){
//	from(sourceSets.main.output) {
//		include "player/**"
//	}
//	
//	manifest.attributes['Class-Path'] = "."
//	manifest.attributes['Main-Class'] = "player." + class_name
//	archiveName = class_name + ".jar"
//}

/** Task that makes the MiniMaxPlayer jar */
task miniMaxPlayerJar(type: Jar) {
	String class_name = "MiniMaxPlayer"
	from(sourceSets.main.output) {
		include "player/**"
		include "common/**"
		include "evaluators/**"
	}
	
	manifest.attributes['Class-Path'] = "."
	manifest.attributes['Main-Class'] = "player." + class_name
	archiveName = class_name + ".jar"
}

/** Task that makes the RandomPlayer jar */
task randomPlayerJar(type: Jar) {
	String class_name = "RandomPlayer"
	from(sourceSets.main.output) {
		include "player/**"
		include "common/**"
		include "evaluators/**"
	}
	
	manifest.attributes['Class-Path'] = "."
	manifest.attributes['Main-Class'] = "player." + class_name
	archiveName = class_name + ".jar"
}


/** Task that makes the SamplePlayer jar */
task SamplePlayerJar(type: Jar) {
	String class_name = "SamplePlayer"
	from(sourceSets.main.output) {
		include "player/**"
		include "common/**"
	}
	
	manifest.attributes['Class-Path'] = "."
	manifest.attributes['Main-Class'] = "player." + class_name
	archiveName = class_name + ".jar"
}

/** 
 * Add new tasks above this line!! 
 */

task allJars(){
	
	dependsOn = tasks.matching {
		it.name =~ "PlayerJar"
		}
}

